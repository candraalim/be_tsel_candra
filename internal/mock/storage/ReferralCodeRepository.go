// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/candraalim/be_tsel_candra/internal/storage/model"

// ReferralCodeRepository is an autogenerated mock type for the ReferralCodeRepository type
type ReferralCodeRepository struct {
	mock.Mock
}

// FindByCode provides a mock function with given fields: ctx, code
func (_m *ReferralCodeRepository) FindByCode(ctx context.Context, code string) (model.ReferralCode, error) {
	ret := _m.Called(ctx, code)

	var r0 model.ReferralCode
	if rf, ok := ret.Get(0).(func(context.Context, string) model.ReferralCode); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Get(0).(model.ReferralCode)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, code)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByMsisdn provides a mock function with given fields: ctx, msisdn
func (_m *ReferralCodeRepository) FindByMsisdn(ctx context.Context, msisdn string) (model.ReferralCode, error) {
	ret := _m.Called(ctx, msisdn)

	var r0 model.ReferralCode
	if rf, ok := ret.Get(0).(func(context.Context, string) model.ReferralCode); ok {
		r0 = rf(ctx, msisdn)
	} else {
		r0 = ret.Get(0).(model.ReferralCode)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, msisdn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, code
func (_m *ReferralCodeRepository) Insert(ctx context.Context, code *model.ReferralCode) error {
	ret := _m.Called(ctx, code)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ReferralCode) error); ok {
		r0 = rf(ctx, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
