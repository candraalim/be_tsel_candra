// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/candraalim/be_tsel_candra/internal/storage/model"

// ReferralHistoryRepository is an autogenerated mock type for the ReferralHistoryRepository type
type ReferralHistoryRepository struct {
	mock.Mock
}

// CountByMsisdn provides a mock function with given fields: ctx, msisdn
func (_m *ReferralHistoryRepository) CountByMsisdn(ctx context.Context, msisdn string) (int, error) {
	ret := _m.Called(ctx, msisdn)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, msisdn)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, msisdn)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByMsisdn provides a mock function with given fields: ctx, msisdn, offset, limit
func (_m *ReferralHistoryRepository) FindByMsisdn(ctx context.Context, msisdn string, offset int, limit int) ([]model.ReferralHistory, error) {
	ret := _m.Called(ctx, msisdn, offset, limit)

	var r0 []model.ReferralHistory
	if rf, ok := ret.Get(0).(func(context.Context, string, int, int) []model.ReferralHistory); ok {
		r0 = rf(ctx, msisdn, offset, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.ReferralHistory)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, int, int) error); ok {
		r1 = rf(ctx, msisdn, offset, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByMsisdnReferee provides a mock function with given fields: ctx, msisdnReferee
func (_m *ReferralHistoryRepository) FindByMsisdnReferee(ctx context.Context, msisdnReferee string) (model.ReferralHistory, error) {
	ret := _m.Called(ctx, msisdnReferee)

	var r0 model.ReferralHistory
	if rf, ok := ret.Get(0).(func(context.Context, string) model.ReferralHistory); ok {
		r0 = rf(ctx, msisdnReferee)
	} else {
		r0 = ret.Get(0).(model.ReferralHistory)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, msisdnReferee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTotalByMsisdnAndMonth provides a mock function with given fields: ctx, msisdn, month
func (_m *ReferralHistoryRepository) GetTotalByMsisdnAndMonth(ctx context.Context, msisdn string, month string) (int, error) {
	ret := _m.Called(ctx, msisdn, month)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, string, string) int); ok {
		r0 = rf(ctx, msisdn, month)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, msisdn, month)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, referral
func (_m *ReferralHistoryRepository) Insert(ctx context.Context, referral *model.ReferralHistory) error {
	ret := _m.Called(ctx, referral)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.ReferralHistory) error); ok {
		r0 = rf(ctx, referral)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
