// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import mock "github.com/stretchr/testify/mock"
import model "github.com/candraalim/be_tsel_candra/internal/storage/model"

// RewardRepository is an autogenerated mock type for the RewardRepository type
type RewardRepository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, ID
func (_m *RewardRepository) Delete(ctx context.Context, ID int64) error {
	ret := _m.Called(ctx, ID)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) error); ok {
		r0 = rf(ctx, ID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByTotalReferral provides a mock function with given fields: ctx, totalReferral
func (_m *RewardRepository) FindByTotalReferral(ctx context.Context, totalReferral int) (model.Reward, error) {
	ret := _m.Called(ctx, totalReferral)

	var r0 model.Reward
	if rf, ok := ret.Get(0).(func(context.Context, int) model.Reward); ok {
		r0 = rf(ctx, totalReferral)
	} else {
		r0 = ret.Get(0).(model.Reward)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, totalReferral)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, _a1
func (_m *RewardRepository) Insert(ctx context.Context, _a1 *model.Reward) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Reward) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Update provides a mock function with given fields: ctx, _a1
func (_m *RewardRepository) Update(ctx context.Context, _a1 model.Reward) error {
	ret := _m.Called(ctx, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Reward) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
